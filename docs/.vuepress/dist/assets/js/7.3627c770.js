(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{205:function(t,e,a){"use strict";a.r(e);var _=a(0),v=Object(_.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"协商缓存与强缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存与强缓存","aria-hidden":"true"}},[t._v("#")]),t._v(" 协商缓存与强缓存")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("浏览器缓存(Brower Caching)是浏览器在本地磁盘对用户最近请求过的文档进行存储，当访问者再次访问同一页面时，浏览器就可以直接从本地磁盘加载文档。")]),t._v(" "),a("p",[a("strong",[t._v("浏览器缓存的优点有：")])]),t._v(" "),a("ul",[a("li",[t._v("减少了冗余的数据传输，节省了网费")]),t._v(" "),a("li",[t._v("减少了服务器的负担，大大提升了网站的性能")]),t._v(" "),a("li",[t._v("加快了客户端加载网页的速度")])]),t._v(" "),a("p",[t._v("浏览器缓存主要有两类：缓存协商和彻底缓存，也有称之为"),a("strong",[t._v("协商缓存")]),t._v("和"),a("strong",[t._v("强缓存")]),t._v("。")]),t._v(" "),a("p",[t._v("浏览器在第一次请求发生后，再次请求时：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("浏览器会先获取该资源缓存的header信息，根据其中的expires和cahe-control判断是否命中强缓存，若命中则直接从缓存中获取资源，包括缓存的header信息，本次请求不会与服务器进行通信；")])]),t._v(" "),a("li",[a("p",[t._v("如果没有命中强缓存，浏览器会发送请求到服务器，该请求会携带第一次请求返回的有关缓存的header字段信息（Last-Modified/IF-Modified-Since、Etag/IF-None-Match）,由服务器根据请求中的相关header信息来对比结果是否命中协商缓存，若命中，则服务器返回新的响应header信息更新缓存中的对应header信息，但是并不返回资源内容，它会告知浏览器可以直接从缓存获取；否则返回最新的资源内容")])])]),t._v(" "),a("h4",{attrs:{id:"强缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#强缓存","aria-hidden":"true"}},[t._v("#")]),t._v(" 强缓存")]),t._v(" "),a("p",[t._v("强缓存是利用http的返回头中的Expires或者Cache-Control两个字段来控制的，用来表示资源的缓存时间。")]),t._v(" "),a("p",[a("strong",[t._v("Expires")])]),t._v(" "),a("p",[t._v("该字段是http1.0时的规范，它的值为一个绝对时间的GMT格式的时间字符串，比如 Expires:Mon,18 Oct 2066 23:59:59 GMT。")]),t._v(" "),a("p",[t._v("这个时间代表着这个资源的失效时间，在此时间之前，即命中缓存。这种方式有一个明显的缺点，由于失效时间是一个绝对时间，所以当服务器与客户端时间偏差较大时，就会导致缓存混乱。")]),t._v(" "),a("p",[a("strong",[t._v("Cache-Control")])]),t._v(" "),a("p",[t._v("Cache-Control 是 http1.1 时出现的 header 信息，主要是利用该字段的 max-age 值来进行判断，它是一个相对时间，例如")]),t._v(" "),a("ul",[a("li",[t._v("Cache-Control:max-age=3600，代表着资源的有效期是3600秒。")])]),t._v(" "),a("p",[t._v("cache-control 除了该字段外，还有下面几个比较常用的设置值：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("no-cache：不使用本地缓存。需要使用缓存协商，先与服务器确认返回的响应是否被更改，如果之前的响应中存在ETag，那么请求的时候会与服务端验证，如果资源未被更改，则可以避免重新下载。")])]),t._v(" "),a("li",[a("p",[t._v("no-store：直接禁止游览器缓存数据，每次用户请求该资源，都会向服务器发送一个请求，每次都会下载完整的资源。")])]),t._v(" "),a("li",[a("p",[t._v("public：可以被所有的用户缓存，包括终端用户和CDN等中间代理服务器。")])]),t._v(" "),a("li",[a("p",[t._v("private：只能被终端用户的浏览器缓存，不允许CDN等中继缓存服务器对其缓存。")])])]),t._v(" "),a("p",[a("strong",[t._v("Cache-Control 与 Expires 可以在服务端配置同时启用，同时启用的时候 Cache-Control 优先级高")])]),t._v(" "),a("h4",{attrs:{id:"协商缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存","aria-hidden":"true"}},[t._v("#")]),t._v(" 协商缓存")]),t._v(" "),a("p",[t._v("协商缓存就是由服务器来确定缓存资源是否可用，所以客户端与服务器端要通过某种标识来进行通信，从而让服务器判断请求资源是否可以缓存访问，这主要涉及到下面两组 header 字段，这两组搭档都是成对出现的，即第一次请求的响应头带上某个字段（ Last-Modified 或者 Etag ），则后续请求则会带上对应的请求字段（ If-Modified-Since 或者 If-None-Match ），若响应头没有 Last-Modified 或者 Etag 字段，则请求头也不会有对应的字段。")]),t._v(" "),a("p",[t._v("很多时候，我们在 network 面板中各请求的 size 项里，会看到两种不同的状态：from memory cache 和 from disk cache，前者指缓存来自内存，后者指缓存来自硬盘。而控制缓存存放位置的，不是别人，就是我们在服务器上设置的 Etag 字段。在浏览器接收到服务器响应后，会检测响应头部（Header），如果有 Etag 字段，那么浏览器就会将本次缓存写入硬盘中。")]),t._v(" "),a("p",[a("strong",[t._v("Last-Modify/If-Modify-Since")])]),t._v(" "),a("p",[t._v("浏览器第一次请求一个资源的时候，服务器返回的header中会加上Last-Modify，Last-modify是一个时间标识该资源的最后修改时间，例如Last-Modify: Thu,31 Dec 2037 23:59:59 GMT。")]),t._v(" "),a("p",[t._v("当浏览器再次请求该资源时，request的请求头中会包含If-Modify-Since，该值为缓存之前返回的Last-Modify。服务器收到If-Modify-Since后，根据资源的最后修改时间判断是否命中缓存。")]),t._v(" "),a("p",[t._v("如果命中缓存，则返回304，并且不会返回资源内容，并且不会返回Last-Modify。")]),t._v(" "),a("p",[a("strong",[t._v("ETag/If-None-Match")])]),t._v(" "),a("p",[t._v("与 Last-Modify/If-Modify-Since 不同的是，Etag/If-None-Match 返回的是一个校验码。ETag 可以保证每一个资源是唯一的，资源变化都会导致 ETag 变化。服务器根据浏览器上送的 If-None-Match 值来判断是否命中缓存。")]),t._v(" "),a("p",[t._v("与 Last-Modified 不一样的是，当服务器返回304 Not Modified 的响应时，由于 ETag 重新生成过，response header 中还会把这个 ETag 返回，即使这个 ETag 跟之前的没有变化。")]),t._v(" "),a("p",[a("strong",[t._v("为什么要有Etag")])]),t._v(" "),a("p",[t._v("你可能会觉得使用Last-Modified已经足以让浏览器知道本地的缓存副本是否足够新，为什么还需要Etag呢？HTTP1.1中Etag的出现主要是为了解决几个Last-Modified比较难解决的问题：")]),t._v(" "),a("p",[t._v("一些文件也许会周期性的更改，但是他的内容并不改变(仅仅改变的修改时间)，这个时候我们并不希望客户端认为这个文件被修改了，而重新GET；")]),t._v(" "),a("p",[t._v("某些文件修改非常频繁，比如在秒以下的时间内进行修改，(比方说1s内修改了N次)，If-Modified-Since能检查到的粒度是s级的，这种修改无法判断(或者说UNIX记录MTIME只能精确到秒)；")]),t._v(" "),a("p",[t._v("某些服务器不能精确的得到文件的最后修改时间。\nLast-Modified与ETag是可以一起使用的，服务器会优先验证ETag，一致的情况下，才会继续比对Last-Modified，最后才决定是否返回304。")]),t._v(" "),a("p",[a("strong",[t._v("强缓存与协商缓存的区别可以用下表来表示：")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("缓存类型")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("获取资源形式")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("状态码")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("发送请求到服务器")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("强缓存")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("从缓存取")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("200（from cache）")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("否，直接从缓存取")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("协商缓存")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("从缓存取")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("304（Not Modified）")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("否，通过服务器来告知缓存是否可用")])])])]),t._v(" "),a("p",[a("strong",[t._v("用户行为对缓存的影响")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("用户操作")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Expires/Cache-Control")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Last-Modied/Etag")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("地址栏回车")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("有效")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("有效")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("页面链接跳转")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("有效")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("有效")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("新开窗口")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("有效")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("有效")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("前进回退")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("有效")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("有效")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("F5刷新")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("无效")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("有效")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Ctrl+F5强制刷新")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("无效")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("无效")])])])])])}],!1,null,null,null);e.default=v.exports}}]);